/*
 * helpFunctions.cpp
 *
 *  Created on: 19.12.2012
 *      Author: henrikfailmezger
 */
#include <iostream>
#include <vector>
#include <math.h>
using namespace std;
#define ARRAY_SIZE(array) (sizeof((array))/sizeof((array[0])))

struct Max {
   //
   int value;
   int index;
};
struct Min {
   //
   int value;
   int index;
};

double sum(std::vector<double> a){
	double s=0.0;
	for (int i=0;i<a.size();i++){
		s=s+a.at(i);
	}
	return s;
}
std::vector<double> sum(std::vector<std::vector<double> > a,int dim){
	std::vector<double> c;
	if(dim==1){
		for (int i=0;i<a.size();i++){
			double s=0.0;
			for (int j=0;j<a.at(i).size();j++){
				s=s+a.at(i).at(j);
			}
			c.push_back(s);
		}
	}else{
		for (int i=0;i<a.at(0).size();i++){
					double s=0.0;
					for (int j=0;j<a.size();j++){
						s=s+a.at(j).at(i);
					}
					c.push_back(s);
		}
	}
	return c;
}
std::vector<double> zeros(int len){
	std::vector<double> a(len,0.0);
	//for (int i=0;i<len;i++){
	//	a.push_back(0.0);
	//}
	return a;
}
std::vector<double>  ones(int len){
	std::vector<double> a(len,1.0);
	//for (int i=0;i<len;i++){
	//	a.push_back(1.0);
	//}
	return a;
}
std::vector<std::vector<double> >  repmat(std::vector<double> v, int rep,int dim){
	std::vector<std::vector<double> > a;
	if(dim==1){
		for (int i=0;i<rep;i++){
			a.push_back(v);
		}
	}

	return a;
}
std::vector<double>   repmat(double v, int rep,int dim){
	std::vector<double>  a;
	if(dim==1){
		for (int i=0;i<rep;i++){
			a.push_back(v);
		}
	}
	return a;
}
std::vector<int> setdiff(std::vector<int> a,int v){ //difference between vector, value
	std::vector<int> f;
	for (int i = 0; i<a.size(); i++){
		if(a.at(i) !=v){
			f.push_back(a.at(i));
		}
	}
	return f;
}

std::vector<int> findIndex(std::vector<std::vector<int> > a,int dim,int v){
	std::vector<int> f;
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
               if(a[i][dim]==v){
		    	  f.push_back(i);
		      }
	}

	return f;
}
int countIndex(std::vector<std::vector<int> > a,int dim,int v){ // counts how often a number is in the array
	int c=0;
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
				if(a[i][dim]==v){
		    	  c++;
		      }
	}
	return c;
}
std::vector<double> arrangeItems(std::vector<double>a,std::vector<int>b){ // counts how often a number is in the array
	std::vector<double> c;
	for (int i = 0; i<b.size(); i++){      // durchl�uft alle Werte von 0 bis 5
				c.push_back(a.at(b.at(i)));
	}
	return c;
}
std::vector<std::vector<double> > arrangeItems(std::vector<std::vector<double> >a,std::vector<int>b){ // counts how often a number is in the array
	std::vector<std::vector<double> > d;
	for (int i = 0; i<a.size(); i++){
		std::vector<double> c;
		for (int j = 0; j<b.size(); j++){      // durchl�uft alle Werte von 0 bis 5
				c.push_back(a.at(i).at(b.at(j)));
		}
		d.push_back(c);
	}
	return d;
}
//
std::vector< std::vector<double> > transpose( std::vector< std::vector<double> > a){
	
    std::vector<double> v(a.size());
	std::vector<vector<double> > b(a.at(0).size(),v);
	
	for (int i = 0; i < a.size(); i++){
		for (int j = 0; j < a.at(0).size(); j++){
			b.at(j).at(i) = a.at(i).at(j);
		}
	}
	return b;
}
//
std::vector<double> multEl(std::vector<double> a,std::vector<double> b){ // element-by-element product
	if(a.size()==b.size()){
		for (int i = 0; i<a.size(); i++){
			a.at(i)=a.at(i)*b.at(i);
		}
	}
	return a;
}
std::vector<std::vector<double> > multEl(std::vector<std::vector<double> > a,std::vector<std::vector<double> > b){ // element-by-element product
	if(a.size()==b.size()){
		for (int i = 0; i<a.size(); i++){
			for (int j = 0; j<a.at(i).size(); j++){
				a.at(i).at(j)=a.at(i).at(j)*b.at(i).at(j);
			}
		}
	}
	return a;
}
std::vector<double> multEl(std::vector<double> a,double b){ // element-by-element product
		for (int i = 0; i<a.size(); i++){
			a.at(i)=a.at(i)*b;
		}

	return a;
}
std::vector<double> addEl(std::vector<double> a,std::vector<double> b){ // element-by-element product
	if(a.size()==b.size()){
		for (int i = 0; i<a.size(); i++){
			a.at(i)=a.at(i)+b.at(i);
		}
	}
	return a;
}
std::vector<int> subEl(std::vector<int> a,int b){ // subtract element from vector
	for (int i = 0; i<a.size(); i++){
			a.at(i)=a.at(i)-b;
	}
	return a;
}
std::vector<std::vector<int> > subEl(std::vector<std::vector<int> > a , int b){ // subtract element from vector
	for (int i = 0; i<a.size(); i++){
		for (int j = 0; j<a.at(i).size(); j++){
			a.at(i).at(j)=a.at(i).at(j)-b;
		}
	}
	return a;
}

std::vector<int> arrayToVector(int a[]){
	std::vector<int> v;
	int l=ARRAY_SIZE(a);
	for (int i=0; i<l;i++){
		v.push_back(a[i]);
	}
	return v;
}

std::vector<double> arrayToVector(double a[]){
	std::vector<double> v;
	int l=ARRAY_SIZE(a);
	for (int i=0; i<l;i++){
		v.push_back(a[i]);
	}
	return v;
}
//
int intersect(std::vector<int> a, std::vector<int> b){ //boolean, 1 if any element interset
	int intersect =0;
	for(int i=0;i<a.size(); i++){
		for(int j=0;j<b.size(); j++){
			if(a.at(i)==b.at(j)){
				intersect =1;
				return intersect;
			}
		}
	}
	return intersect;
}
int intersect(std::vector<int> a, int b){ //boolean, 1 if any element interset
	int intersect =0;
	for(int i=0;i<a.size(); i++){
			if(a.at(i)==b){
				intersect =1;
				return intersect;
			}
		}
	return intersect;
}
//
Max max(std::vector<double> a){
	int m=0;
	int mIndex=0;
	Max mv;
	for (int i=0; i<a.size();i++){
		if(a[i]>=m){
			m=a[i];
			mIndex=i;
		}
	}
	mv.value=m;
	mv.index=mIndex;
	return mv;
}
Max max(std::vector<int> a){
	int m=0;
		int mIndex=0;
		Max mv;
		for (int i=0; i<a.size();i++){
			if(a[i]>=m){
				m=a[i];
				mIndex=i;
			}
		}
		mv.value=m;
		mv.index=mIndex;
		return mv;
}
Max maxColumn(std::vector<std::vector<double> > a){
        std::vector<double> mValues;
        std::vector<int> mIndices;
        double m=0;
		int mIndex=0;
		MaxVector mv;
        for (int i=0; i<a.size();i++){
            for (int j=0; j<a.at(0).size();j++){
                if(a.at(i).at(j)>=m){
                    m=a[i];
                    mIndex=i;
                }
            }
            m.Values.push_back(m);
            mIndices.push_back(mIndex);
		}
		mv.values=m;
		mv.indices=mIndex;
		return mv;
}
Min min(std::vector<int> a){
	int m=a[0];
	int mIndex=0;
	for (int i=0; i<a.size();i++){
		if(a[i]<=m){
			m=a[i];
			mIndex=i;
		}
	}
	Min mv;
	mv.index=mIndex;
	mv.value=m;
	return mv;
}
std::vector<int> add(std::vector<int> a,int v){
	std::vector<int> s;
	for (int i = 0; i < a.size(); i++){
		s.push_back(a[i]+v);
	}
	return s;
}
std::vector<std::vector<double> > initialise(int n){
	std::vector<std::vector<double> > s;
	for (int i = 0; i < n; i++){
		std::vector<double> b;
		s.push_back(b);
	}
	return s;
}
void print(int v){
	for (int i = 0; i<v; i++){      // durchl�uft alle Werte von 0 bis 5
		      cout << i <<"," << endl;
		}
}

void printArray(int a[],int lengthA) {
	for (int i = 0; i<lengthA; i++){      // durchl�uft alle Werte von 0 bis 5
	      cout << a[i] <<",";
	}
}
void printArray(double a[],int lengthA) {
	for (int i = 0; i<lengthA; i++){      // durchl�uft alle Werte von 0 bis 5
	      cout << a[i] <<",";
	}
}
void printVector(std::vector<int> a) {
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
	      cout << a[i] <<",";
	}
	cout<<endl;
}
void printVector(std::vector<std::vector<double> > a) {
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
		if(a.at(i).size()>0){
			for (int j = 0; j<a.at(i).size(); j++){
				cout << a.at(i).at(j) <<",";
			}
			cout<<endl;
		}
	}
	cout<<endl;
}
void printVector(std::vector<std::vector<int> > a) {
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
		for (int j = 0; j<a[i].size(); j++){
			cout << a[i][j] <<",";
		}
		cout<<endl;
	}
	cout<<endl;
}
void printVector(std::vector<double> a) {
	for (int i = 0; i<a.size(); i++){      // durchl�uft alle Werte von 0 bis 5
	      cout << a[i] <<",";
	}
	cout<<endl;
}




